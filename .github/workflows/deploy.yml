name: CI/CD Pipeline

on:
  push:
    branches:
      - main # main 브랜치에 push하면 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ GitHub Repository 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ JDK 21 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # 3️⃣ Spring Boot 프로젝트 빌드
      - name: Build Spring Boot application
        run: |
          cd alstudy_back
          ./mvnw clean package -DskipTests

      # 4️⃣ Docker Hub 로그인
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # 5️⃣ Spring Boot Docker 이미지 빌드 & 푸시
      - name: Build and push Spring Boot backend image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/alstudy-spring:latest ./alstudy_back
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/alstudy-spring:latest

      # 6️⃣ React Docker 이미지 빌드 & 푸시
      - name: Build and push React frontend image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/alstudy-react:latest ./alstudy_front
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/alstudy-react:latest

      # 7️⃣ Flask Docker 이미지 빌드 & 푸시
      - name: Build and push Flask API image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/alstudy-flask:latest ./GradePython
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/alstudy-flask:latest

      - name: SSH into EC2 and deploy
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

          # EC2 호스트 키 검증을 무시하고 SSH 접속
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.AWS_EC2_IP }} "sudo mkdir -p /home/ubuntu/alstudy_project"

          # .env 파일을 EC2로 전송
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST }}" >> .env
          echo "RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}" >> .env
          echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "REACT_APP_WS_HOST=${{ secrets.REACT_APP_WS_HOST }}" >> .env

          # .env 파일을 EC2 서버로 전송
          scp -o StrictHostKeyChecking=no -i private_key.pem .env ubuntu@${{ secrets.AWS_EC2_IP }}:/home/ubuntu/alstudy_project/.env

      # 9️⃣ AWS EC2에 SSH 접속하여 배포
      - name: SSH into server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_IP }}
          username: ubuntu
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/alstudy_project
            docker-compose down
            docker-compose pull
            docker-compose up -d --build
            docker system prune -af
